// Generated by CoffeeScript 1.6.2
var Backup, async, backup, child_process, config, dateFormat, dbox, exec, fs, mkdirp, path, util, yaml, _;

fs = require("fs");

util = require("util");

dbox = require("dbox");

child_process = require("child_process");

dateFormat = require("dateformat");

yaml = require("js-yaml");

config = require("../config");

mkdirp = require("mkdirp").sync;

_ = require("underscore");

path = require("path");

async = require("async");

exec = child_process.exec;

Backup = (function() {
  Backup.prototype.client = null;

  Backup.prototype.files = [];

  function Backup() {
    var app, datedFolder;

    datedFolder = dateFormat(new Date(), "yyyy-mm-dd");
    this.sourceDir = path.join(config.local_backup_dir, datedFolder);
    this.destDir = path.join(config.dir, datedFolder);
    mkdirp(this.sourceDir);
    mkdirp(this.destDir);
    app = dbox.app({
      app_key: config.app_key,
      app_secret: config.app_secret
    });
    this.client = app.client(config.access_token);
    _.bindAll(this, "initDropbox", "loadFiles", "uploadFiles", "upload");
    async.series([this.initDropbox, this.loadFiles, this.uploadFiles], function(err) {
      if (err != null) {
        throw err;
      }
    });
  }

  Backup.prototype.initDropbox = function(next) {
    return this.client.account(function(status, reply) {
      if (status !== 200) {
        return next(new Error("Dropbox is not connected..."));
      }
      console.log("Welcome, " + reply.display_name + "!");
      return next(null);
    });
  };

  Backup.prototype.loadFiles = function(next) {
    var self;

    self = this;
    return fs.readdir(this.sourceDir, function(err, files) {
      if (err != null) {
        return next(new Error(err));
      }
      self.files = files;
      return next(null);
    });
  };

  Backup.prototype.uploadFiles = function(next) {
    var doUpload, self, setupDir;

    self = this;
    setupDir = function(callback) {
      var cb;

      cb = callback;
      return self.client.metadata(self.destDir, function(status, reply) {
        if (!reply.is_dir) {
          return self.client.mkdir(self.destDir, function(status, reply) {
            return cb(null);
          });
        } else {
          return cb(null);
        }
      });
    };
    doUpload = function(callback) {
      var cb;

      cb = callback;
      console.log("Starting upload...");
      console.log(self.files);
      return async.eachLimit(self.files, 3, self.upload, function(err) {
        if (err != null) {
          throw cb(new Error(err));
        }
        console.log("Done uploading all files.");
        return cb(null);
      });
    };
    return async.series([setupDir, doUpload], function(err) {
      if (err != null) {
        throw err;
      }
      return next(null);
    });
  };

  Backup.prototype.upload = function(file, next) {
    var destFile, self, sourceFile;

    self = this;
    sourceFile = path.join(this.sourceDir, file);
    destFile = path.join(this.destDir, file);
    return fs.readFile(sourceFile, function(err, data) {
      if (err) {
        util.error("Error reading " + file);
        next(null);
        return;
      }
      util.puts("Starting upload of " + file);
      return self.client.put(destFile, data, function(status, reply) {
        util.puts("Upload of " + destFile + " completed (status: " + status + ")");
        return next(null);
      });
    });
  };

  return Backup;

})();

backup = new Backup();
